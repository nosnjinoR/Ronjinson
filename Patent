import os
import hashlib
import zipfile
import subprocess
from docx import Document
from datetime import datetime

# Configuration
repo_url = "https://github.com/nosnijnoR/Ronjinson.git"
repo_name = "Ronjinson"
master_doc_path = "/mnt/data/Master_Documentation.docx"
zip_path = "/mnt/data/Master_Documentation.zip"
hash_path = "/mnt/data/Master_Documentation.hash"
project_files = ["/mnt/data/Test_Automation_Pipeline.docx", "/mnt/data/cleaned_dataset.csv"]

# Step 1: Generate Master Documentation
def generate_master_documentation():
    doc = Document()
    doc.add_heading("Master Documentation for Automated Systems", level=1)
    doc.add_paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    doc.add_paragraph("This document compiles all systems, scripts, and workflows for intellectual property protection.")
    
    for file in project_files:
        if os.path.exists(file):
            with open(file, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                doc.add_heading(f"Content of {os.path.basename(file)}", level=2)
                doc.add_paragraph(content)
        else:
            doc.add_paragraph(f"File not found: {file}", style='Italic')
    
    doc.save(master_doc_path)
    print(f"Master Documentation created at {master_doc_path}")

# Step 2: Create ZIP and Hash
def create_zip_and_hash():
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file in project_files:
            if os.path.exists(file):
                zipf.write(file, os.path.basename(file))
        zipf.write(master_doc_path, os.path.basename(master_doc_path))
    print(f"ZIP archive created at {zip_path}")

    sha256_hash = hashlib.sha256()
    with open(zip_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    with open(hash_path, "w") as hash_file:
        hash_file.write(sha256_hash.hexdigest())
    print(f"SHA-256 hash created at {hash_path}")

# Step 3: GitHub Operations
def github_operations():
    # Clone repository
    subprocess.run(["git", "clone", repo_url])
    os.chdir(repo_name)

    # Move files into repo
    subprocess.run(["mv", master_doc_path, "."])
    subprocess.run(["mv", zip_path, "."])
    subprocess.run(["mv", hash_path, "."])

    # Commit and push
    subprocess.run(["git", "add", "."])
    subprocess.run(["git", "commit", "-m", "Add Master Documentation and Sealed Archive"])
    subprocess.run(["git", "push", "origin", "main"])
    print("Documentation pushed to GitHub repository.")

# Main Execution
if __name__ == "__main__":
    generate_master_documentation()
    create_zip_and_hash()
    github_operations()
https://github.com/nosnijnoR/Ronjinson.git
subprocess.run
